import React, { useState, useEffect, memo, useCallback } from 'react';
import { Heart, Share2, Copy, Clock, Sparkles, RefreshCw, Download, Zap, DollarSign, Eye, ThumbsUp, ExternalLink, MessageCircle, MoreVertical } from 'lucide-react';
import { ShowerThought } from '../types';
import { isThoughtFavorited, incrementThoughtViews, toggleThoughtLike, incrementThoughtShares } from '../services/thoughtsService';
import { getCategoryById } from '../data/categories';
import { useAuth } from '../contexts/AuthContext';
import ShareableThoughtCard from './ShareableThoughtCard';
import LiveComments from './realtime/LiveComments';
import { useToast } from '../components/ui/Toast';

interface ThoughtCardProps {
  thought: ShowerThought;
  onFavoriteChange?: (thought: ShowerThought, isFavorite: boolean) => void;
  onRegenerate?: (thought: ShowerThought) => void;
  onExport?: (thought: ShowerThought) => void;
  showAuthor?: boolean;
}

const ThoughtCard = memo(function ThoughtCard({ 
  thought, 
  onFavoriteChange, 
  onRegenerate, 
  onExport, 
  showAuthor = false 
}: ThoughtCardProps) {
  const { user } = useAuth();
  const { success, error: showError } = useToast();
  const [isFavorite, setIsFavorite] = useState(thought.isFavorite || false);
  const [isLiked, setIsLiked] = useState(false);
  const [stats, setStats] = useState({
    views: thought.views || 0,
    likes: thought.likes || 0,
    shares: thought.shares || 0
  });
  const [copySuccess, setCopySuccess] = useState(false);
  const [shareSuccess, setShareSuccess] = useState(false);
  const [loading, setLoading] = useState(false);
  const [showShareCard, setShowShareCard] = useState(false);
  const [showComments, setShowComments] = useState(false);

  const category = getCategoryById(thought.category);

  // Check favorite status and increment views on mount
  useEffect(() => {
    checkFavoriteStatus();
    handleViewIncrement();
  }, [thought.id, user]);

  const checkFavoriteStatus = async () => {
    try {
      console.log('Checking favorite status for thought:', thought.id);
      const favorited = await isThoughtFavorited(thought.id, user?.id);
      console.log('Favorite status result:', favorited);
      setIsFavorite(favorited);
    } catch (error) {
      console.error('Error checking favorite status:', error);
    }
  };

  const handleViewIncrement = async () => {
    try {
      console.log('Incrementing view count for thought:', thought.id);
      const newViews = await incrementThoughtViews(thought.id);
      console.log('New view count:', newViews);
      setStats(prev => ({ ...prev, views: newViews }));
    } catch (error) {
      console.error('Error incrementing views:', error);
    }
  };

  const handleFavorite = async () => {
    if (loading) return;
    
    setLoading(true);
    const newFavoriteState = !isFavorite;
    
    try {
      console.log('Toggling favorite for thought:', thought.id, 'to', newFavoriteState);
      if (onFavoriteChange) {
        await onFavoriteChange(thought, newFavoriteState);
        setIsFavorite(newFavoriteState);
        success(
          newFavoriteState ? 'Added to favorites' : 'Removed from favorites',
          newFavoriteState ? 'This thought has been saved to your favorites.' : 'This thought has been removed from your favorites.'
        );
      }
    } catch (error) {
      console.error('Error updating favorite:', error);
      showError('Failed to update favorite', error.message || 'Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleLike = async () => {
    try {
      console.log('Toggling like for thought:', thought.id);
      const newLikes = await toggleThoughtLike(thought.id, user?.id);
      console.log('New like count:', newLikes);
      setStats(prev => ({ ...prev, likes: newLikes }));
      setIsLiked(!isLiked);
    } catch (error) {
      console.error('Error toggling like:', error);
      showError('Failed to like thought', 'Please try again.');
    }
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(thought.content);
      setCopySuccess(true);
      success('Copied to clipboard!', 'The thought has been copied to your clipboard.');
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
      showError('Failed to copy', 'Unable to copy to clipboard.');
    }
  };

  const handleShare = async () => {
    const shareText = `"${thought.content}" - Generated by ShowerGPT`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Shower Thought from ShowerGPT',
          text: shareText,
          url: window.location.href,
        });
        
        // Increment shares count
        const newShares = await incrementThoughtShares(thought.id);
        setStats(prev => ({ ...prev, shares: newShares }));
        setShareSuccess(true);
        setTimeout(() => setShareSuccess(false), 2000);
        success('Shared successfully!', 'Thank you for sharing this thought.');
      } catch (error) {
        if (error.name !== 'AbortError') {
          console.error('Error sharing:', error);
          handleCopy(); // Fallback to copy
        }
      }
    } else {
      handleCopy(); // Fallback for browsers without Web Share API
    }
  };

  const handleRegenerate = useCallback(() => {
    if (onRegenerate) {
      console.log('Regenerating variation for thought:', thought.id);
      onRegenerate(thought);
      success('Generating variation...', 'A new variation of this thought is being created.');
    }
  }, [thought, onRegenerate]);

  const handleExport = useCallback(() => {
    if (onExport) {
      console.log('Exporting thought:', thought.id);
      onExport(thought);
      success('Thought exported!', 'The thought has been downloaded as a text file.');
    }
  }, [thought, onExport]);

  const formatTime = (date: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      hour: 'numeric',
      minute: 'numeric',
      hour12: true,
    }).format(new Date(date));
  };

  const getMoodConfig = (mood: string) => {
    switch (mood) {
      case 'philosophical':
        return {
          color: 'text-purple-700 bg-gradient-to-r from-purple-100 to-purple-200 dark:from-purple-900/30 dark:to-purple-800/30 dark:text-purple-300',
          icon: 'ðŸ¤”',
          gradient: 'from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20'
        };
      case 'humorous':
        return {
          color: 'text-orange-700 bg-gradient-to-r from-orange-100 to-orange-200 dark:from-orange-900/30 dark:to-orange-800/30 dark:text-orange-300',
          icon: 'ðŸ˜„',
          gradient: 'from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20'
        };
      case 'scientific':
        return {
          color: 'text-green-700 bg-gradient-to-r from-green-100 to-green-200 dark:from-green-900/30 dark:to-green-800/30 dark:text-green-300',
          icon: 'ðŸ”¬',
          gradient: 'from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20'
        };
      default:
        return {
          color: 'text-blue-700 bg-gradient-to-r from-blue-100 to-blue-200 dark:from-blue-900/30 dark:to-blue-800/30 dark:text-blue-300',
          icon: 'ðŸ’­',
          gradient: 'from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20'
        };
    }
  };

  const moodConfig = getMoodConfig(thought.mood);

  return (
    <>
      <div className="group bg-white dark:bg-slate-800 rounded-3xl shadow-xl p-8 border border-blue-100 dark:border-slate-700 hover:shadow-2xl hover:border-blue-200 dark:hover:border-slate-600 transition-all duration-500 transform hover:scale-105 animate-fade-in relative overflow-hidden">
        {/* Decorative gradient overlay */}
        <div className={`absolute top-0 left-0 right-0 h-1 bg-gradient-to-r ${moodConfig.gradient}`}></div>
        
        {/* Category Badge */}
        {category && (
          <div className="absolute top-4 left-4">
            <div className={`${category.color} text-white px-3 py-1 rounded-full text-xs font-bold flex items-center gap-1`}>
              <span>{category.icon}</span>
              <span>{category.name}</span>
            </div>
          </div>
        )}

        {/* AI indicator and floating sparkle decoration */}
        <div className="absolute top-4 right-4 flex items-center gap-2">
          {thought.source === 'openai' && (
            <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white px-2 py-1 rounded-full text-xs font-bold flex items-center gap-1">
              <Sparkles className="w-3 h-3" />
              AI
            </div>
          )}
          <div className="opacity-20 group-hover:opacity-40 transition-opacity duration-300">
            <Sparkles className="w-6 h-6 text-blue-400 dark:text-blue-300" />
          </div>
        </div>

        <div className="flex items-start justify-between mb-6 mt-8">
          <div className="flex flex-col">
            <div className="flex items-center gap-3">
              <span className="text-2xl">{moodConfig.icon}</span>
              <span className={`px-4 py-2 rounded-full text-sm font-bold ${moodConfig.color} shadow-lg`}>
                {thought.mood}
              </span>
            </div>
            <div className="flex items-center gap-2 text-slate-500 dark:text-slate-400 text-xs mt-1">
              <Clock className="w-3 h-3" />
              <time dateTime={thought.timestamp.toISOString()}>
                {formatTime(thought.timestamp)}
              </time>
            </div>
          </div>
        </div>

        {/* Author Info */}
        {showAuthor && thought.author && (
          <div className="mb-4 flex items-center gap-3 p-3 bg-slate-50 dark:bg-slate-700 rounded-2xl">
            <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
              {thought.author.username?.slice(0, 2).toUpperCase() || '??'}
            </div>
            <div>
              <div className="font-medium text-slate-800 dark:text-slate-200">
                {thought.author.fullName || thought.author.username}
              </div>
              <div className="text-sm text-slate-500 dark:text-slate-400">
                @{thought.author.username}
              </div>
            </div>
          </div>
        )}

        <div className="mb-6">
          <p className="text-slate-800 dark:text-slate-200 text-xl leading-relaxed font-medium">
            "{thought.content}"
          </p>
        </div>

        {thought.topic && (
          <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-2xl border border-blue-200 dark:border-blue-800">
            <div className="flex items-center gap-2">
              <span className="text-sm text-slate-600 dark:text-slate-400 font-medium">Inspired by:</span>
              <span className="text-blue-700 dark:text-blue-300 font-bold">{thought.topic}</span>
            </div>
          </div>
        )}

        {/* Tags */}
        {thought.tags && thought.tags.length > 0 && (
          <div className="mb-6 flex flex-wrap gap-2">
            {thought.tags.map((tag, index) => (
              <span
                key={index}
                className="px-3 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-sm font-medium"
              >
                #{tag}
              </span>
            ))}
          </div>
        )}

        {/* Statistics */}
        <div className="mb-6 flex items-center gap-4 text-sm text-slate-500 dark:text-slate-400">
          <div className="flex items-center gap-1">
            <Eye className="w-4 h-4" />
            <span>{stats.views}</span>
          </div>
          <div className="flex items-center gap-1">
            <ThumbsUp className="w-4 h-4" />
            <span>{stats.likes}</span>
          </div>
          <div className="flex items-center gap-1">
            <Share2 className="w-4 h-4" />
            <span>{stats.shares}</span>
          </div>
          <button
            onClick={() => setShowComments(true)}
            className="flex items-center gap-1 hover:text-blue-500 transition-colors"
          >
            <MessageCircle className="w-4 h-4" />
            <span>Comments</span>
          </button>
        </div>

        {thought.variations && thought.variations.length > 0 && (
          <div className="mb-6 p-4 bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-2xl border border-green-200 dark:border-green-800">
            <div className="flex items-center gap-2 mb-2">
              <RefreshCw className="w-4 h-4 text-green-600 dark:text-green-400" />
              <span className="text-sm text-green-700 dark:text-green-300 font-medium">
                {thought.variations.length} variation{thought.variations.length > 1 ? 's' : ''} generated
              </span>
            </div>
          </div>
        )}

        {/* AI Usage Stats */}
        {thought.source === 'openai' && (thought.tokensUsed || thought.cost) && (
          <div className="mb-6 p-4 bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-2xl border border-purple-200 dark:border-purple-800">
            <div className="flex items-center gap-4 text-sm">
              {thought.tokensUsed && (
                <div className="flex items-center gap-1 text-purple-700 dark:text-purple-300">
                  <Zap className="w-4 h-4" />
                  <span>{thought.tokensUsed} tokens</span>
                </div>
              )}
              {thought.cost && (
                <div className="flex items-center gap-1 text-purple-700 dark:text-purple-300">
                  <DollarSign className="w-4 h-4" />
                  <span>${thought.cost.toFixed(4)}</span>
                </div>
              )}
            </div>
          </div>
        )}

        <div className="flex items-center justify-between pt-6 border-t border-slate-100 dark:border-slate-700">
          <div className="flex items-center gap-3">
            <button
              onClick={handleFavorite}
              disabled={loading}
              className={`flex items-center justify-center p-2 rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed ${
                isFavorite
                  ? 'bg-gradient-to-r from-red-500 to-red-600 text-white'
                  : 'bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 text-slate-700 dark:text-slate-300 hover:from-red-50 hover:to-red-100 dark:hover:from-red-900/20 dark:hover:to-red-800/20 hover:text-red-600 dark:hover:text-red-400'
              }`}
            >
              <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''} ${loading ? 'animate-pulse' : ''}`} />
            </button>

            <button
              onClick={handleLike}
              className={`p-2 rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 ${
                isLiked
                  ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white'
                  : 'bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 text-slate-700 dark:text-slate-300 hover:from-blue-50 hover:to-blue-100 dark:hover:from-blue-900/20 dark:hover:to-blue-800/20 hover:text-blue-600 dark:hover:text-blue-400'
              }`}
              title="Like this thought"
            >
              <ThumbsUp className={`w-4 h-4 ${isLiked ? 'fill-current' : ''}`} />
            </button>
          </div>

          <div className="flex items-center gap-2">
            {onRegenerate && (
              <button
                onClick={handleRegenerate}
                className="p-2 rounded-2xl bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 text-slate-700 dark:text-slate-300 hover:from-blue-50 hover:to-blue-100 dark:hover:from-blue-900/20 dark:hover:to-blue-800/20 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
                title="Generate variation"
              >
                <RefreshCw className="w-4 h-4" />
              </button>
            )}
            {onExport && (
              <button
                onClick={handleExport}
                className="p-2 rounded-2xl bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 text-slate-700 dark:text-slate-300 hover:from-green-50 hover:to-green-100 dark:hover:from-green-900/20 dark:hover:to-green-800/20 hover:text-green-600 dark:hover:text-green-400 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
                title="Export thought"
              >
                <Download className="w-4 h-4" />
              </button>
            )}
            <button
              onClick={() => setShowShareCard(true)}
              className="p-2 rounded-2xl bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 text-slate-700 dark:text-slate-300 hover:from-purple-50 hover:to-purple-100 dark:hover:from-purple-900/20 dark:hover:to-purple-800/20 hover:text-purple-600 dark:hover:text-purple-400 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
              title="Create shareable card"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
            <button
              onClick={handleCopy}
              className="p-2 rounded-2xl bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 text-slate-700 dark:text-slate-300 hover:from-blue-50 hover:to-blue-100 dark:hover:from-blue-900/20 dark:hover:to-blue-800/20 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
              title="Copy to clipboard"
            >
              <Copy className="w-4 h-4" />
            </button>
            <button
              onClick={handleShare}
              className="p-2 rounded-2xl bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 text-slate-700 dark:text-slate-300 hover:from-blue-50 hover:to-blue-100 dark:hover:from-blue-900/20 dark:hover:to-blue-800/20 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
              title="Share"
            >
              <Share2 className="w-4 h-4" />
            </button>
          </div>
        </div>

        {(copySuccess || shareSuccess) && (
          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 animate-fade-in">
            <div className="bg-green-500 text-white px-4 py-2 rounded-full text-sm font-medium shadow-lg">
              âœ¨ {copySuccess ? 'Copied to clipboard!' : 'Shared successfully!'}
            </div>
          </div>
        )}
      </div>

      {/* Shareable Card Modal */}
      <ShareableThoughtCard
        thought={thought}
        isOpen={showShareCard}
        onClose={() => setShowShareCard(false)}
      />

      {/* Comments Modal */}
      <LiveComments
        thoughtId={thought.id}
        isOpen={showComments}
        onClose={() => setShowComments(false)}
      />
    </>
  );
}, (prevProps, nextProps) => {
  // Custom comparison function for better memoization
  return (
    prevProps.thought.id === nextProps.thought.id &&
    prevProps.thought.content === nextProps.thought.content &&
    prevProps.thought.isFavorite === nextProps.thought.isFavorite &&
    prevProps.thought.likes === nextProps.thought.likes &&
    prevProps.thought.views === nextProps.thought.views &&
    prevProps.thought.shares === nextProps.thought.shares &&
    prevProps.showAuthor === nextProps.showAuthor &&
    prevProps.onFavoriteChange === nextProps.onFavoriteChange &&
    prevProps.onRegenerate === nextProps.onRegenerate &&
    prevProps.onExport === nextProps.onExport
  );
});

export default ThoughtCard;