import React, { useRef } from 'react';
import { Download, Share2, Copy, X } from 'lucide-react';
import { ShowerThought } from '../types';
import { getCategoryById } from '../data/categories';
import { useTheme } from '../contexts/ThemeContext';

interface ShareableThoughtCardProps {
  thought: ShowerThought;
  isOpen: boolean;
  onClose: () => void;
}

export default function ShareableThoughtCard({ thought, isOpen, onClose }: ShareableThoughtCardProps) {
  const cardRef = useRef<HTMLDivElement>(null);
  const { isDark } = useTheme();

  if (!isOpen) return null;

  const category = getCategoryById(thought.category);
  
  const handleDownloadImage = async () => {
    if (!cardRef.current) return;

    try {
      const html2canvas = (await import('html2canvas')).default;
      const canvas = await html2canvas(cardRef.current, {
        backgroundColor: isDark ? '#1e293b' : '#ffffff',
        scale: 2,
        useCORS: true
      });
      
      const link = document.createElement('a');
      link.download = `shower-thought-${thought.id}.png`;
      link.href = canvas.toDataURL();
      link.click();
    } catch (error) {
      console.error('Error generating image:', error);
    }
  };

  const handleCopyText = async () => {
    const text = `"${thought.content}"\n\n- Generated by ShowerGPT`;
    try {
      await navigator.clipboard.writeText(text);
    } catch (error) {
      console.error('Failed to copy:', error);
    }
  };

  const handleShare = async () => {
    const shareData = {
      title: 'Shower Thought from ShowerGPT',
      text: `"${thought.content}"`,
      url: window.location.href
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        if (error.name !== 'AbortError') {
          handleCopyText();
        }
      }
    } else {
      handleCopyText();
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <div className="bg-white dark:bg-slate-800 rounded-3xl shadow-2xl max-w-2xl w-full border border-slate-200 dark:border-slate-700">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-700">
          <h2 className="text-xl font-bold text-slate-800 dark:text-slate-200">Share Thought</h2>
          <button
            onClick={onClose}
            className="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
          >
            <X className="w-6 h-6 text-slate-600 dark:text-slate-400" />
          </button>
        </div>

        {/* Shareable Card */}
        <div className="p-6">
          <div
            ref={cardRef}
            className="bg-gradient-to-br from-blue-500 to-purple-600 p-8 rounded-3xl text-white relative overflow-hidden"
          >
            {/* Background Pattern */}
            <div className="absolute inset-0 opacity-10">
              <div className="absolute top-4 left-4 text-6xl">ðŸš¿</div>
              <div className="absolute bottom-4 right-4 text-4xl">ðŸ’­</div>
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-8xl opacity-5">
                {category?.icon || 'âœ¨'}
              </div>
            </div>

            {/* Content */}
            <div className="relative z-10">
              {/* Category Badge */}
              {category && (
                <div className="inline-flex items-center gap-2 bg-white bg-opacity-20 backdrop-blur-sm px-4 py-2 rounded-full mb-6">
                  <span className="text-lg">{category.icon}</span>
                  <span className="font-medium">{category.name}</span>
                </div>
              )}

              {/* Thought Content */}
              <blockquote className="text-2xl font-medium leading-relaxed mb-6">
                "{thought.content}"
              </blockquote>

              {/* Footer */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="bg-white bg-opacity-20 backdrop-blur-sm px-3 py-1 rounded-full">
                    <span className="text-sm font-medium">
                      {thought.mood === 'philosophical' && 'ðŸ¤” Philosophical'}
                      {thought.mood === 'humorous' && 'ðŸ˜„ Humorous'}
                      {thought.mood === 'scientific' && 'ðŸ”¬ Scientific'}
                    </span>
                  </div>
                  {thought.source === 'openai' && (
                    <div className="bg-white bg-opacity-20 backdrop-blur-sm px-3 py-1 rounded-full">
                      <span className="text-sm font-medium">âœ¨ AI Generated</span>
                    </div>
                  )}
                </div>
                <div className="text-right">
                  <div className="text-lg font-bold">ShowerGPT</div>
                  <div className="text-sm opacity-80">Whimsical Shower Thoughts</div>
                </div>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-4 mt-6">
            <button
              onClick={handleDownloadImage}
              className="flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-blue-500 text-white rounded-2xl hover:bg-blue-600 transition-colors font-medium"
            >
              <Download className="w-5 h-5" />
              Download Image
            </button>
            <button
              onClick={handleShare}
              className="flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-green-500 text-white rounded-2xl hover:bg-green-600 transition-colors font-medium"
            >
              <Share2 className="w-5 h-5" />
              Share
            </button>
            <button
              onClick={handleCopyText}
              className="flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-purple-500 text-white rounded-2xl hover:bg-purple-600 transition-colors font-medium"
            >
              <Copy className="w-5 h-5" />
              Copy Text
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}